apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    signingConfigs {
        if (!System.getenv("TRAVIS")) {
            debug {
                // Load keystore
                def keystorePropertiesFile = rootProject.file("keystore.properties")
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile = file(keystoreProperties['storeFile'])
                storePassword = keystoreProperties['storePassword']
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
            }
        }
    }
    compileSdk 34

    defaultConfig {
        applicationId 'in.avimarine.waypointracing'
        buildConfigField 'boolean', 'HIDDEN_APP', 'false'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 42
        versionName '3.2.4'
        signingConfig signingConfigs.debug
    }
    buildTypes{
        getByName("debug"){
            applicationIdSuffix = ".dev"
            debuggable = true
        }
        debuggableRelease {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    flavorDimensions 'default'
    productFlavors {
        regular {
            isDefault = true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }

    lint {
        checkReleaseBuilds false
    }
    namespace 'in.avimarine.waypointracing'
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(path: ':AviMarineAndroidUtils')
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
    def fragment_version = "1.6.1"
    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.android.material:material:1.11.0-alpha01'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'net.sf.geographiclib:GeographicLib-Java:2.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:4.9.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-geojson:5.3.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
    implementation("androidx.fragment:fragment-ktx:$fragment_version")
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'androidx.test:core-ktx:1.5.0'
    implementation "androidx.core:core-ktx:1.10.1"
    implementation 'com.github.judemanutd:autostarter:1.1.0'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2"
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'eu.bolt:screenshotty:1.0.4'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.firebaseui:firebase-ui-firestore:8.0.0'
    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'
    implementation 'com.github.acefalobi:android-stepper:0.3.0'
    implementation 'com.github.santalu:maskara:1.0.0'
    implementation 'com.mapbox.maps:android:10.16.0'
    testImplementation "org.robolectric:robolectric:4.10.3"
    implementation('dev.doubledot.doki:library:0.0.1@aar') {
        transitive = true
    }
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'junit:junit:4.13.2'
}
apply plugin: 'com.google.firebase.crashlytics'
if (getGradle().getStartParameter().getTaskRequests().toString().contains('Google')) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'

    task copyJson(type: Copy) {
        from '../../environment/google-services'
        into '.'
        include 'traccar-client-android.json'
        rename('traccar-client-android.json', 'google-services.json')
    }

    afterEvaluate {
        preBuild.dependsOn copyJson
    }
}
